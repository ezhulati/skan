rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Public read for venues and menus (customer ordering)
    match /venue/{venueId} {
      allow read: if true;
      allow write: if request.auth != null && 
        request.auth.token.venueId == venueId;
      
      // Menu items - public read for customer ordering
      match /menuItem/{itemId} {
        allow read: if true;
        allow write: if request.auth != null && 
          request.auth.token.venueId == venueId;
      }
      
      // Menu categories - public read for customer ordering
      match /menuCategory/{categoryId} {
        allow read: if true;
        allow write: if request.auth != null && 
          request.auth.token.venueId == venueId;
      }
      
      // Tables - public read for QR code access
      match /table/{tableId} {
        allow read: if true;
        allow write: if request.auth != null && 
          request.auth.token.venueId == venueId;
      }
    }
    
    // Orders: public create (customers), auth required for management (staff)
    match /orders/{orderId} {
      allow create: if true; // Customers can create orders
      allow read, update: if request.auth != null; // Staff can read/update
      allow delete: if request.auth != null && 
        request.auth.token.role in ['manager', 'owner'];
    }
    
    // Users: auth required for all operations
    match /users/{userId} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || 
         request.auth.token.role in ['manager', 'owner']);
      allow write: if request.auth != null && 
        request.auth.token.role in ['manager', 'owner'];
    }
    
    // Invitations: managers can create, public read for acceptance
    match /invitations/{invitationId} {
      allow create: if request.auth != null && 
        request.auth.token.role in ['manager', 'owner'];
      allow read: if true; // Public read for invitation acceptance
      allow update: if true; // Allow updates for invitation acceptance
      allow delete: if request.auth != null && 
        request.auth.token.role in ['manager', 'owner'];
    }
    
    // Analytics and reports (role-based access)
    match /analytics/{docId} {
      allow read, write: if request.auth != null && 
        request.auth.token.role in ['manager', 'owner'];
    }
    
    // Settings (owner access only)
    match /settings/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.role == 'owner';
    }
  }
}